Terminals unused in grammar

   "return"
   "-"
   "/"
   TSMI


Grammar

    0 $accept: tld END

    1 identifier: TID

    2 tld: functions

    3 functions: function

    4 function: "func" identifier "(" params ")" "->" type expr

    5 params: param "," params
    6       | param

    7 param: identifier ":" type

    8 arraytype: "[" type "]"

    9 simpletype: identifier

   10 type: arraytype
   11     | simpletype

   12 blk: "{" blkparts "}"

   13 blkparts: blkparts expr
   14         | %empty

   15 ifexpr: "if" "(" expr ")" expr

   16 whileexpr: "while" "(" expr ")" expr

   17 vardecl: "var" identifier ":" type "=" expr

   18 valdecl: "val" identifier ":" type "=" expr

   19 operatorexpr: TINT
   20             | expr "+" expr
   21             | expr "*" expr

   22 expr: blk
   23     | ifexpr
   24     | whileexpr
   25     | vardecl
   26     | valdecl
   27     | operatorexpr


Terminals, with rules where they appear

END (0) 0
error (256)
"func" (258) 4
"return" (259)
"while" (260) 16
"if" (261) 15
"var" (262) 17
"val" (263) 18
"+" (264) 20
"-" (265)
"*" (266) 21
"/" (267)
"(" (268) 4 15 16
")" (269) 4 15 16
"{" (270) 12
"}" (271) 12
"[" (272) 8
"]" (273) 8
"->" (274) 4
":" (275) 7 17 18
TSMI (276)
"," (277) 5
TID (278) 1
TINT (279) 19
"=" (280) 17 18


Nonterminals, with rules where they appear

$accept (26)
    on left: 0
identifier <node> (27)
    on left: 1, on right: 4 7 9 17 18
tld (28)
    on left: 2, on right: 0
functions <node> (29)
    on left: 3, on right: 2
function <node> (30)
    on left: 4, on right: 3
params <node> (31)
    on left: 5 6, on right: 4 5
param <node> (32)
    on left: 7, on right: 5 6
arraytype <node> (33)
    on left: 8, on right: 10
simpletype <node> (34)
    on left: 9, on right: 11
type <node> (35)
    on left: 10 11, on right: 4 7 8 17 18
blk <node> (36)
    on left: 12, on right: 22
blkparts <node> (37)
    on left: 13 14, on right: 12 13
ifexpr <node> (38)
    on left: 15, on right: 23
whileexpr <node> (39)
    on left: 16, on right: 24
vardecl <node> (40)
    on left: 17, on right: 25
valdecl <node> (41)
    on left: 18, on right: 26
operatorexpr <node> (42)
    on left: 19 20 21, on right: 27
expr <node> (43)
    on left: 22 23 24 25 26 27, on right: 4 13 15 16 17 18 20 21


State 0

    0 $accept: . tld END
    2 tld: . functions
    3 functions: . function
    4 function: . "func" identifier "(" params ")" "->" type expr

    "func"  shift, and go to state 1

    tld        go to state 2
    functions  go to state 3
    function   go to state 4


State 1

    1 identifier: . TID
    4 function: "func" . identifier "(" params ")" "->" type expr

    TID  shift, and go to state 5

    identifier  go to state 6


State 2

    0 $accept: tld . END

    END  shift, and go to state 7


State 3

    2 tld: functions .

    $default  reduce using rule 2 (tld)


State 4

    3 functions: function .

    $default  reduce using rule 3 (functions)


State 5

    1 identifier: TID .

    $default  reduce using rule 1 (identifier)


State 6

    4 function: "func" identifier . "(" params ")" "->" type expr

    "("  shift, and go to state 8


State 7

    0 $accept: tld END .

    $default  accept


State 8

    1 identifier: . TID
    4 function: "func" identifier "(" . params ")" "->" type expr
    5 params: . param "," params
    6       | . param
    7 param: . identifier ":" type

    TID  shift, and go to state 5

    identifier  go to state 9
    params      go to state 10
    param       go to state 11


State 9

    7 param: identifier . ":" type

    ":"  shift, and go to state 12


State 10

    4 function: "func" identifier "(" params . ")" "->" type expr

    ")"  shift, and go to state 13


State 11

    5 params: param . "," params
    6       | param .  [")"]

    ","  shift, and go to state 14

    $default  reduce using rule 6 (params)


State 12

    1 identifier: . TID
    7 param: identifier ":" . type
    8 arraytype: . "[" type "]"
    9 simpletype: . identifier
   10 type: . arraytype
   11     | . simpletype

    "["  shift, and go to state 15
    TID  shift, and go to state 5

    identifier  go to state 16
    arraytype   go to state 17
    simpletype  go to state 18
    type        go to state 19


State 13

    4 function: "func" identifier "(" params ")" . "->" type expr

    "->"  shift, and go to state 20


State 14

    1 identifier: . TID
    5 params: . param "," params
    5       | param "," . params
    6       | . param
    7 param: . identifier ":" type

    TID  shift, and go to state 5

    identifier  go to state 9
    params      go to state 21
    param       go to state 11


State 15

    1 identifier: . TID
    8 arraytype: . "[" type "]"
    8          | "[" . type "]"
    9 simpletype: . identifier
   10 type: . arraytype
   11     | . simpletype

    "["  shift, and go to state 15
    TID  shift, and go to state 5

    identifier  go to state 16
    arraytype   go to state 17
    simpletype  go to state 18
    type        go to state 22


State 16

    9 simpletype: identifier .

    $default  reduce using rule 9 (simpletype)


State 17

   10 type: arraytype .

    $default  reduce using rule 10 (type)


State 18

   11 type: simpletype .

    $default  reduce using rule 11 (type)


State 19

    7 param: identifier ":" type .

    $default  reduce using rule 7 (param)


State 20

    1 identifier: . TID
    4 function: "func" identifier "(" params ")" "->" . type expr
    8 arraytype: . "[" type "]"
    9 simpletype: . identifier
   10 type: . arraytype
   11     | . simpletype

    "["  shift, and go to state 15
    TID  shift, and go to state 5

    identifier  go to state 16
    arraytype   go to state 17
    simpletype  go to state 18
    type        go to state 23


State 21

    5 params: param "," params .

    $default  reduce using rule 5 (params)


State 22

    8 arraytype: "[" type . "]"

    "]"  shift, and go to state 24


State 23

    4 function: "func" identifier "(" params ")" "->" type . expr
   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 37


State 24

    8 arraytype: "[" type "]" .

    $default  reduce using rule 8 (arraytype)


State 25

   16 whileexpr: "while" . "(" expr ")" expr

    "("  shift, and go to state 38


State 26

   15 ifexpr: "if" . "(" expr ")" expr

    "("  shift, and go to state 39


State 27

    1 identifier: . TID
   17 vardecl: "var" . identifier ":" type "=" expr

    TID  shift, and go to state 5

    identifier  go to state 40


State 28

    1 identifier: . TID
   18 valdecl: "val" . identifier ":" type "=" expr

    TID  shift, and go to state 5

    identifier  go to state 41


State 29

   12 blk: "{" . blkparts "}"
   13 blkparts: . blkparts expr
   14         | . %empty

    $default  reduce using rule 14 (blkparts)

    blkparts  go to state 42


State 30

   19 operatorexpr: TINT .

    $default  reduce using rule 19 (operatorexpr)


State 31

   22 expr: blk .

    $default  reduce using rule 22 (expr)


State 32

   23 expr: ifexpr .

    $default  reduce using rule 23 (expr)


State 33

   24 expr: whileexpr .

    $default  reduce using rule 24 (expr)


State 34

   25 expr: vardecl .

    $default  reduce using rule 25 (expr)


State 35

   26 expr: valdecl .

    $default  reduce using rule 26 (expr)


State 36

   27 expr: operatorexpr .

    $default  reduce using rule 27 (expr)


State 37

    4 function: "func" identifier "(" params ")" "->" type expr .  [END]
   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr

    "+"  shift, and go to state 43
    "*"  shift, and go to state 44

    $default  reduce using rule 4 (function)


State 38

   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   16          | "while" "(" . expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 45


State 39

   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   15       | "if" "(" . expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 46


State 40

   17 vardecl: "var" identifier . ":" type "=" expr

    ":"  shift, and go to state 47


State 41

   18 valdecl: "val" identifier . ":" type "=" expr

    ":"  shift, and go to state 48


State 42

   12 blk: . "{" blkparts "}"
   12    | "{" blkparts . "}"
   13 blkparts: blkparts . expr
   15 ifexpr: . "if" "(" expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    "}"      shift, and go to state 49
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 50


State 43

   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   20             | expr "+" . expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 51


State 44

   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   21             | expr "*" . expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 52


State 45

   16 whileexpr: "while" "(" expr . ")" expr
   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr

    "+"  shift, and go to state 43
    "*"  shift, and go to state 44
    ")"  shift, and go to state 53


State 46

   15 ifexpr: "if" "(" expr . ")" expr
   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr

    "+"  shift, and go to state 43
    "*"  shift, and go to state 44
    ")"  shift, and go to state 54


State 47

    1 identifier: . TID
    8 arraytype: . "[" type "]"
    9 simpletype: . identifier
   10 type: . arraytype
   11     | . simpletype
   17 vardecl: "var" identifier ":" . type "=" expr

    "["  shift, and go to state 15
    TID  shift, and go to state 5

    identifier  go to state 16
    arraytype   go to state 17
    simpletype  go to state 18
    type        go to state 55


State 48

    1 identifier: . TID
    8 arraytype: . "[" type "]"
    9 simpletype: . identifier
   10 type: . arraytype
   11     | . simpletype
   18 valdecl: "val" identifier ":" . type "=" expr

    "["  shift, and go to state 15
    TID  shift, and go to state 5

    identifier  go to state 16
    arraytype   go to state 17
    simpletype  go to state 18
    type        go to state 56


State 49

   12 blk: "{" blkparts "}" .

    $default  reduce using rule 12 (blk)


State 50

   13 blkparts: blkparts expr .  ["while", "if", "var", "val", "{", "}", TINT]
   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr

    "+"  shift, and go to state 43
    "*"  shift, and go to state 44

    $default  reduce using rule 13 (blkparts)


State 51

   20 operatorexpr: expr . "+" expr
   20             | expr "+" expr .  [END, "while", "if", "var", "val", "+", ")", "{", "}", TINT]
   21             | expr . "*" expr

    "*"  shift, and go to state 44

    $default  reduce using rule 20 (operatorexpr)

    Conflict between rule 20 and token "+" resolved as reduce (%left "+").
    Conflict between rule 20 and token "*" resolved as shift ("+" < "*").


State 52

   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr
   21             | expr "*" expr .  [END, "while", "if", "var", "val", "+", "*", ")", "{", "}", TINT]

    $default  reduce using rule 21 (operatorexpr)

    Conflict between rule 21 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 21 and token "*" resolved as reduce (%left "*").


State 53

   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   16          | "while" "(" expr ")" . expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 57


State 54

   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   15       | "if" "(" expr ")" . expr
   16 whileexpr: . "while" "(" expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 58


State 55

   17 vardecl: "var" identifier ":" type . "=" expr

    "="  shift, and go to state 59


State 56

   18 valdecl: "val" identifier ":" type . "=" expr

    "="  shift, and go to state 60


State 57

   16 whileexpr: "while" "(" expr ")" expr .  [END, "while", "if", "var", "val", ")", "{", "}", TINT]
   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr

    "+"  shift, and go to state 43
    "*"  shift, and go to state 44

    $default  reduce using rule 16 (whileexpr)

    Conflict between rule 16 and token "+" resolved as shift ("while" < "+").
    Conflict between rule 16 and token "*" resolved as shift ("while" < "*").


State 58

   15 ifexpr: "if" "(" expr ")" expr .  [END, "while", "if", "var", "val", ")", "{", "}", TINT]
   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr

    "+"  shift, and go to state 43
    "*"  shift, and go to state 44

    $default  reduce using rule 15 (ifexpr)

    Conflict between rule 15 and token "+" resolved as shift ("if" < "+").
    Conflict between rule 15 and token "*" resolved as shift ("if" < "*").


State 59

   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   17        | "var" identifier ":" type "=" . expr
   18 valdecl: . "val" identifier ":" type "=" expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 61


State 60

   12 blk: . "{" blkparts "}"
   15 ifexpr: . "if" "(" expr ")" expr
   16 whileexpr: . "while" "(" expr ")" expr
   17 vardecl: . "var" identifier ":" type "=" expr
   18 valdecl: . "val" identifier ":" type "=" expr
   18        | "val" identifier ":" type "=" . expr
   19 operatorexpr: . TINT
   20             | . expr "+" expr
   21             | . expr "*" expr
   22 expr: . blk
   23     | . ifexpr
   24     | . whileexpr
   25     | . vardecl
   26     | . valdecl
   27     | . operatorexpr

    "while"  shift, and go to state 25
    "if"     shift, and go to state 26
    "var"    shift, and go to state 27
    "val"    shift, and go to state 28
    "{"      shift, and go to state 29
    TINT     shift, and go to state 30

    blk           go to state 31
    ifexpr        go to state 32
    whileexpr     go to state 33
    vardecl       go to state 34
    valdecl       go to state 35
    operatorexpr  go to state 36
    expr          go to state 62


State 61

   17 vardecl: "var" identifier ":" type "=" expr .  [END, "while", "if", "var", "val", ")", "{", "}", TINT]
   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr

    "+"  shift, and go to state 43
    "*"  shift, and go to state 44

    $default  reduce using rule 17 (vardecl)

    Conflict between rule 17 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 17 and token "*" resolved as shift ("var" < "*").


State 62

   18 valdecl: "val" identifier ":" type "=" expr .  [END, "while", "if", "var", "val", ")", "{", "}", TINT]
   20 operatorexpr: expr . "+" expr
   21             | expr . "*" expr

    "+"  shift, and go to state 43
    "*"  shift, and go to state 44

    $default  reduce using rule 18 (valdecl)

    Conflict between rule 18 and token "+" resolved as shift ("val" < "+").
    Conflict between rule 18 and token "*" resolved as shift ("val" < "*").
